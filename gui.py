import PySimpleGUI as sg
from PIL import Image
from tkinter import filedialog
from processpiper.text2diagram import render


# def resize_image(image_path, max_width, max_height):
#     img = Image.open(image_path)
#     img.thumbnail((max_width, max_height), Image.ANTIALIAS)
#     img.save("resized_image.png", "PNG")
#     return "resized_image.png"


def resize_image(image_path, max_width, max_height):
    img = Image.open(image_path)
    img.thumbnail((max_width, max_height), Image.ANTIALIAS)
    resized_image_path = "resized_image.png"
    img.save(resized_image_path, "PNG")
    return resized_image_path


def save_image(image_path: str):
    img = Image.open(image_path)

    if save_path := filedialog.asksaveasfilename(
        defaultextension=".png",
        filetypes=[("PNG files", "*.png"), ("All files", "*.*")],
    ):
        img.save(save_path, "PNG")
        print(f"Image saved at {save_path}")


def main():
    # Define the layout of the GUI
    test_text = """
    title: Pizza Order Process
colourtheme: BLUEMOUNTAIN
lane: Customer
        (start) as start
        [Browse PizzaPiper website] as browse_website
        [Order a pizza] as order_pizza
        [Make payment] as make_payment
        [Receive pizza] as receive_pizza
        (end) as end
pool: Pizza Piper Enterprise
    lane: Pizza Shop
        [Receive order] as receive_order
        [Bake pizza] as bake_pizza
        <Pizza ready?> as pizza_ready
    lane: Pizza Delivery
        [Deliver pizza] as deliver_pizza

start->browse_website->order_pizza->make_payment
make_payment-"Order details"->receive_order->bake_pizza
bake_pizza->pizza_ready
pizza_ready-"Yes"->deliver_pizza-"Freshly baked \\npizza"->receive_pizza
pizza_ready-"No"->bake_pizza
receive_pizza->end

footer: Generated by Process Piper
    """
    
    test_text = """
    title: Make pizza process
    lane: Pizza Shop
        (start) as start
        [Put the pizza in the oven] as put_pizza_in_oven
        [Check to see if pizza is done] as check_pizza_done
        <Done baking?> as done_baking
        [Take the pizza out of the oven] as take_pizza_out_of_oven
        (end) as end
        
    start->put_pizza_in_oven->check_pizza_done->done_baking
    done_baking-"Yes"->take_pizza_out_of_oven->end
    done_baking-"No"->put_pizza_in_oven
    
    """

    # test_text = """
    # title: Sample Test Process
    # colourtheme: GREENTURTLE
    # lane: End User
    #     (start) as start
    #     [Enter Keyword] as enter_keyword
    #     (end) as end

    # start->enter_keyword->end
    # """

    tab_log_layout = [
        [sg.Column(layout=[[sg.Multiline(size=(100, 20), key="log_text")]], pad=(0, 0))]
    ]

    tab_output_layout = [
        [
            sg.Column(
                layout=[
                    [sg.Image(size=(100, 100), filename="", key="output_image")],
                    [sg.Button("Save Diagram", key="save_diagram")],
                ],
                pad=(0, 0),
            )
        ]
    ]

    layout = [
        [sg.Multiline(size=(100, 20), key="user_input", default_text=test_text)],
        [sg.Button("Generate"), sg.Button("Exit")],
        [
            sg.TabGroup(
                [
                    [
                        sg.Tab("Output", tab_output_layout),
                        sg.Tab("Log", tab_log_layout),
                    ]
                ],
            )
        ],
    ]

    # Create the window
    window = sg.Window("Text to Diagram", layout)

    # Event loop
    while True:
        event, values = window.read()

        if event in (None, "Exit"):
            break

        if event == "Generate":
            user_input = values["user_input"]

            # Call the render function to generate the diagram
            try:
                render(user_input, output_file)
            except Exception as e:
                print(e)
                window["log_text"].update(e)
                continue

            # Update the Image element to display the generated diagram
            tab_width, tab_height = window["Output"].get_size()
            print(f"tab size {tab_width}, {tab_height}")
            # output_image_width, output_image_height = window["output_image"].get_size()
            output_image_width, output_image_height = 800, 800
            print(f"width: {output_image_width}, height: {output_image_height}")
            resized_image_path = resize_image(
                output_file, output_image_width, output_image_height
            )
            window["output_image"].update(filename=resized_image_path)

        if event == "save_diagram":
            save_image(output_file)

    # Close the window
    window.close()


output_file = "output.png"
if __name__ == "__main__":
    main()
